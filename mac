#!/usr/bin/env zsh
### end common-components/zsh-shebang

# Welcome to the thoughtbot laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [[ ":$PATH:" != *":$HOME/.bin:"* ]]; then
  echo 'export PATH="$HOME/.bin:$PATH"' >> ~/.zshrc
  source ~/.zshrc
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}

function installcask() {
  brew cask install "${@}" 2> /dev/null
}

function brewin() {
  brew install "${@}" 2> /dev/null
}
### end common-components/shared-functions

if [[ -f /etc/zshenv ]]; then
  fancy_echo "Fixing OSX zsh environment bug ..."
    sudo mv /etc/{zshenv,zshrc}
fi
### end mac-components/zsh-fix

fancy_echo "Disabling Gatekeeper"
  sudo spctl --master-disable

if (( ! $+commands[brew] )); then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.github.com/Homebrew/homebrew/go/install)
    brew update

  if ! grep -qs "recommended by brew doctor" ~/.zshrc; then
    fancy_echo "Put Homebrew location earlier in PATH ..."
      echo "\n# recommended by brew doctor" >> ~/.zshrc
      echo "export PATH=\"/usr/local/bin:\$PATH\"\n" >> ~/.zshrc
      source ~/.zshrc
  fi
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi
### end mac-components/homebrew

fancy_echo "Installilng Zsh 5.0.2 ..."
  brewin zsh

fancy_echo "Installing libmpdclient for Tmux"
  brewin libmpdclient

fancy_echo "Adding /usr/local/bin/zsh to /etc/shells (Will require administrative password)"
  echo "/usr/local/bin/zsh" | sudo tee -a /etc/shells

fancy_echo "Changing default login shell to /usr/local/bin/zsh (Will require administrative password)"
  chsh -s /usr/local/bin/zsh

fancy_echo "Installing Prezto, some terrific extensions to zsh ... "
  curl -L https://github.com/NanoXD/prezto/raw/master/install.zsh | zsh
### end mac-components/prezto

fancy_echo "Checking for SSH key, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa -C "nano@fdp.io"

fancy_echo "Adding SSH Key to authentication agent"
  ssh-add ~/.ssh/id_rsa

fancy_echo "Copying SSH key to clipboard"
  pbcopy < ~/.ssh/id_rsa.pub

fancy_echo "Opening browser to add SSH key to Github"
  open "https://github.com/settings/ssh"
### end mac-components/ssh-key

fancy_echo "Upgrading and linking OpenSSL ..."
  brew install openssl
### end mac-components/compiler-and-libraries

fancy_echo "Installing Python 3"
  brewin python3
### end mac-components/python

fancy_echo "Installing git, mercurial, and extras"
  brewin git git-extras git-flow node mercurial

fancy_echo "Installing gh"
  brew tap jingweno/gh
  brew install gh

fancy_echo "Installing tig, a pretty log viewer"
  brewin tig
### end mac-components/git

fancy_echo "Install wget with I18n URI support"
  brewin wget --enable-iri

fancy_echo "Installing Redis, a good key-value database ..."
  brewin redis

fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
  brewin the_silver_searcher

fancy_echo "Installing ack, just in case"
  brewin ack

fancy_echo "Installing CMake"
  brewin cmake

fancy_echo "Installing vim from Homebrew to get the latest version ..."
  brewin macvim --override-system-vim

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  brewin ctags

fancy_echo "Installing tmux, to save project state and switch between projects ..."
  brewin tmux

fancy_echo "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
  brewin reattach-to-user-namespace

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brewin imagemagick

fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
  brewin qt

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  brewin watch

fancy_echo "Installing tree, a recursive directory listing"
  brewin tree

fancy_echo "Installing graphviz, npm, and pow! Trust me, you want them ..."
  brewin graphviz
  curl get.pow.cx | sh

fancy_echo "Installing Mosh, a mobile shell"
  brewin mosh

fancy_echo "Installing htop, a TUI for top"
  brewin htop

fancy_echo "Installing youtube-dl for video downloads"
  brewin youtube-dl

fancy_echo "Installing ifstat, a tool for network interfaces"
  brewin ifstat

fancy_echo "Installing jq, a lightweight and flexible command-line JSON processor"
  brewin jq

fancy_echo "Installing GNU grep"
  brewin https://raw.github.com/Homebrew/homebrew-dupes/master/grep.rb
### end mac-components/packages

fancy_echo "Pulling dotfiles"
  mkdir -p ~/Developer/{Automation,Code,OSS,Projects,Sandbox,Tools}
  git clone --recursive git@github.com:NanoXD/nanofiles.git ~/Developer/Code/nanofiles

fancy_echo "Linking dotfiles"
  for dotfile in "${ZDOTDIR:-$HOME}"/Developer/Code/nanofiles/.{ctags,gemrc,gitconfig,gitignore,pryrc,thymerc,tmux.conf,vimrc}; do
    ln -fs "$dotfile" "${ZDOTDIR:-$HOME}/${dotfile:t}"
  done

fancy_echo "Linking local bin folder"
  ln -Fs ~/Developer/Code/nanofiles/bin ~/bin

fancy_echo "Linking teamocil folder"
  ln -Fs ~/Developer/Code/nanofiles/teamocil ~/.teamocil

fancy_echo "Opening Powerline fonts"
  open ~/Developer/Code/nanofiles/powerline-fonts/UbuntuMono/*.ttf
### end common-components/dotfiles

fancy_echo "Installing rbenv, to change Ruby versions ..."
  brewin rbenv

  if ! grep -qs "rbenv init" ~/.zshrc; then
    echo 'eval "$(rbenv init -)"' >> ~/.zshrc

    fancy_echo "Enable shims and autocompletion ..."
      eval "$(rbenv init -)"
  fi

  source ~/.zshrc
### end mac-components/rbenv

fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
  brewin rbenv-gem-rehash

fancy_echo "Installing ruby-build, to install Rubies ..."
  brewin ruby-build

fancy_echo "Installing rbenv-ctags"
  mkdir -p ~/.rbenv/plugins
  git clone https://github.com/tpope/rbenv-ctags.git ~/.rbenv/plugins/rbenv-ctags

fancy_echo "Installing rbenv-update, a plugin manager"
  git clone https://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update
### end mac-components/rbenv-plugins

fancy_echo "Installing go"
  brewin go

fancy_echo "Installing Elixir, a functional programming language"
  brewin erlang
  brewin elixir
### end mac-components/languages

fancy_echo "Installing Ruby 2.1.0..."
  rbenv install 2.1.0

fancy_echo "Installing Ruby 2.0.0..."
  rbenv install 2.0.0-p353

fancy_echo "Installing Ruby 1.9.3"
  rbenv install 1.9.3-p484

fancy_echo "Setting Ruby 2.0.0-p353 as global default Ruby ..."
  rbenv global 2.1.0
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing Bundler to install project-specific Ruby gems ..."
  gem install bundler --pre

fancy_echo "Installing critical Ruby gems for Rails development ..."
  gem install gem-ctags teamocil rails jazz_hands thyme nomad-cli
### end common-components/ruby-environment

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=`sysctl -n hw.ncpu`
  bundle config --global jobs `expr $number_of_cores - 1`

### end mac-components/bundler

fancy_echo "Installing Heroku CLI client ..."
  brew install heroku-toolbelt

fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
  heroku plugins:install git://github.com/ddollar/heroku-config.git
### end mac-components/heroku

fancy_echo "Installing essential NPM packages - Grunt, Yeoman, and Bower, because you need them ..."
  npm install -g coffee-script grunt-cli npm-check-updates jsonlint jshint
### end mac-components/npm-environment

export HOMEBREW_CASK_OPTS=--appdir=/Applications

fancy_echo "Tapping into homebrew-cask"
  brew tap phinze/homebrew-cask
  brew tap caskroom/homebrew-versions
  brewin brew-cask
  brew update

fancy_echo "Installing Dropbox"
  installcask dropbox

fancy_echo "Installing PCKeyboardHack & KeyRemap4Macbook to remap keys"
  installcask pckeyboardhack
  installcask keyremap4macbook

fancy_echo "Installing iTerm2, a better terminal experience"
  installcask iterm2

fancy_echo "Installing Alfred"
  installcask alfred

fancy_echo "Installing Spacious"
  installcask spacious

fancy_echo "Installing Google Chrome"
  installcask google-chrome

fancy_echo "Installing Java 7"
  installcask java

fancy_echo "Installing Bartender to wrangle the menubar"
  installcask bartender

fancy_echo "Installing Vagrant to manage dev environments"
  installcask vagrant

fancy_echo "Installing CloudApp"
  installcask cloudapp

fancy_echo "Installing AppDelete"
  installcask appdelete

fancy_echo "Installing Doxie drivers"
  installcask doxie

fancy_echo "Installing Evernote for notes"
  installcask evernote

fancy_echo "Installing Google Hangouts"
  installcask google-hangouts

fancy_echo "Installing Instacast, a podcast manager"
  installcask instacast

fancy_echo "Installing Racket"
  installcask racket

fancy_echo "Installing Rdio"
  installcask rdio

fancy_echo "Installing Skype"
  installcask skype

fancy_echo "Installing Sourcetree"
  installcask sourcetree

fancy_echo "Installing Sublime Text 3"
  installcask sublime-text-3

fancy_echo "Installing The Unarchiver"
  installcask the-unarchiver

fancy_echo "Installing TrueCrypt"
  installcask truecrypt

fancy_echo "Installing Inboard, a screenshot manager"
  installcask inboard

fancy_echo "Installing Anvil, a menubar app for managing local websites"
  installcask anvil

fancy_echo "Installing HockeyCoach, an application for Hockey"
  installcask hockeycoach

fancy_echo "Installing WebP Quicklook Plugin"
  installcask webp-quicklook

fancy_echo "Installing other Quicklook Plugin"
  installcask quicklook-csv
  installcask qlcolorcode
  installcask qlprettypatch
  installcask quicklook-json
  installcask qlmarkdown
  installcask qlstephen
  installcask qlcolorcode

fancy_echo "Installing Delivery Status Widget"
  installcask delivery-status

fancy_echo "Installing Asepsis, a smart solution for .DS_Store pollution"
  installcask asepsis
### end mac-components/homebrew-cask

fancy_echo "Downloading Projects"
  git clone git@github.com:NanoXD/boxylib.git ~/Developer/Projects/boxylib
  git clone git@github.com:NanoXD/eulerb.git ~/Developer/Projects/eulerb
  git clone git@github.com:NanoXD/fdpio.git ~/Developer/Projects/fdpio
  git clone git@github.com:NanoXD/fpoop.git ~/Developer/Projects/"Functional Programming for OO Programmer"
  git clone git@github.com:NanoXD/homebrew-cask.git ~/Developer/Projects/Caskroom/homebrew-cask
  git clone git@github.com:caskroom/homebrew-versions.git ~/Developer/Projects/Caskroom/homebrew-versions
  git clone git@github.com:NanoXD/mega_projects_rb.git ~/Developer/Projects/mega_projects_rb
  git clone git@github.com:NanoXD/octopress.git ~/Developer/Projects/blog
  git clone git@github.com:NanoXD/readlog.git ~/Developer/Projects/readlog
  git clone git@github.com:SeaRbSg/realm_of_racket.git ~/Developer/Projects/realm_of_racket
  git clone git@github.com:NanoXD/Reddit-Daily-Programmer.git ~/Developer/Projects/Reddit-Daily-Programmer

fancy_echo "Downloading Automation Scripts"
  git clone git@github.com:NanoXD/laptop.git ~/Developer/Automation/laptop

fancy_echo "Downloading Railscast Downloader"
  git clone https://github.com/bayan/railscast-downloader.git ~/Developer/Tools/railscast-downloader

fancy_echo "Installing VMWare Fusion plugin for vagrant"
  vagrant plugin install vagrant-vmware-fusion

fancy_echo "Installing Vagrant Digital Ocean provider"
  vagrant plugin install vagrant-digitalocean

fancy_echo "Installing Vagrant pristine plugin"
  vagrant plugin install vagrant-pristine
### end common-components/projects

fancy_echo "Select a name for your computer:"
  read comp_name
  sudo scutil --set ComputerName "$comp_name"
  sudo scutil --set HostName "$comp_name"
  sudo scutil --set LocalHostName "$comp_name"
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$comp_name"

fancy_echo "Enable access for assistive devices"
  sudo touch /private/var/db/.AccessibilityAPIEnabled

fancy_echo "Expand save panel by default"
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

fancy_echo "Save to disk (not to iCloud) by default"
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

fancy_echo "Disable the 'Are you sure you want to open this application?' dialog"
  defaults write com.apple.LaunchServices LSQuarantine -bool false

fancy_echo "Trackpad: enable tap to click for this user and for the login screen"
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

fancy_echo "Increase sound quality for Bluetooth headphones/headsets"
  defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

fancy_echo "Enable full keyboard access for all controls"
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

fancy_echo "Set a blazingly fast keyboard repeat rate"
  defaults write NSGlobalDomain KeyRepeat -int 0

fancy_echo "Enable subpixel font rendering on non-Apple LCDs"
  defaults write NSGlobalDomain AppleFontSmoothing -int 2

fancy_echo "Show icons for hard drives, servers, and removable media on the desktop"
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

fancy_echo "Finder: allow text selection in Quick Look"
  defaults write com.apple.finder QLEnableTextSelection -bool true

fancy_echo "Avoid creating .DS_Store files on network volumes"
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

fancy_echo "Empty Trash securely by default"
  defaults write com.apple.finder EmptyTrashSecurely -bool true

fancy_echo "Set the icon size of Dock items to 36 pixels"
  defaults write com.apple.dock tilesize -int 36

fancy_echo "Automatically hide and show the Dock"
  defaults write com.apple.dock autohide -bool true

fancy_echo "Set Safari’s home page to `about:blank` for faster loading"
  defaults write com.apple.Safari HomePage -string "about:blank"

fancy_echo "Enable Safari’s debug menu"
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

fancy_echo "Make Safari’s search banners default to Contains instead of Starts With"
  defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

fancy_echo "Enable the Develop menu and the Web Inspector in Safari"
  defaults write com.apple.Safari IncludeDevelopMenu -bool true
  defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

fancy_echo "Add a context menu item for showing the Web Inspector in web views"
  defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

fancy_echo "Done. Note that some of these changes require a logout/restart to take effect."

### end mac-components/default-settings

