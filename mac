#!/usr/bin/env zsh
### end common-components/zsh-shebang

# Welcome to the thoughtbot laptop script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [[ ":$PATH:" != *":$HOME/.bin:"* ]]; then
  echo 'export PATH="$HOME/.bin:$PATH"' >> ~/.zshrc
  source ~/.zshrc
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}
### end common-components/shared-functions

if [[ -f /etc/zshenv ]]; then
  fancy_echo "Fixing OSX zsh environment bug ..."
    sudo mv /etc/{zshenv,zshrc}
fi
### end mac-components/zsh-fix

fancy_echo "Disabling Gatekeeper"
  sudo spctl --master-disable

if [[ ! -f /usr/local/bin/brew ]]; then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsSL https://raw.github.com/mxcl/homebrew/go)
fi

fancy_echo "Updating Homebrew ..."
  brew update

if ! grep -qs "recommended by brew doctor" ~/.zshrc; then
  fancy_echo "Put Homebrew location earlier in PATH ..."
    echo "\n# recommended by brew doctor" >> ~/.zshrc
    echo "export PATH='/usr/local/bin:$PATH'\n" >> ~/.zshrc
    source ~/.zshrc
fi
### end mac-components/homebrew

fancy_echo "Installilng Zsh 5.0.2 ..."
  brew install zsh libmpdclient

fancy_echo "Adding /usr/local/bin/zsh to /etc/shells (Will require administrative password)"
  echo "/usr/local/bin/zsh" | sudo tee -a /etc/shells

fancy_echo "Changing default login shell to /usr/local/bin/zsh (Will require administrative password)"
  chsh -s /usr/local/bin/zsh

fancy_echo "Installing Prezto, some terrific extensions to zsh ... "
  curl -L https://github.com/NanoXD/prezto/raw/master/install.zsh | zsh
### end mac-components/prezto

fancy_echo "Checking for SSH key, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa -C "nano@fdp.io"

fancy_echo "Adding SSH Key to authentication agent"
  ssh-add ~/.ssh/id_rsa

fancy_echo "Copying SSH key to clipboard"
  pbcopy < ~/.ssh/id_rsa.pub

fancy_echo "Opening browser to add SSH key to Github"
  open "https://github.com/settings/ssh"
### end mac-components/ssh-key

fancy_echo "Upgrading and linking OpenSSL ..."
  brew install openssl
### end mac-components/compiler-and-libraries

fancy_echo "Installing Python 2.7.5 ..."
  brew install python

fancy_echo "Updating setup tools ..."
  pip install --upgrade setuptools
  pip install --upgrade pip
### end mac-components/python

fancy_echo "Installing git, hub, mercurial, Node.js..."
  brew install git git-extras git-flow hub node

fancy_echo "Installing tig, a pretty log viewer"
  brew install tig
### end mac-components/git

fancy_echo "Install wget with I18n URI support"
  brew install wget --enable-iri

fancy_echo "Installing Redis, a good key-value database ..."
  brew install redis

fancy_echo "Installing The Silver Searcher (better than ack or grep) to search the contents of files ..."
  brew install the_silver_searcher

fancy_echo "Installing ack, just in case"
  brew install ack

fancy_echo "Installing vim from Homebrew to get the latest version ..."
  brew install vim

fancy_echo "Installing ctags, to index files for vim tab completion of methods, classes, variables ..."
  brew install ctags

fancy_echo "Installing tmux, to save project state and switch between projects ..."
  brew install tmux

fancy_echo "Installing reattach-to-user-namespace, for copy-paste and RubyMotion compatibility with tmux ..."
  brew install reattach-to-user-namespace

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brew install imagemagick

#fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
#  brew install qt

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  brew install watch

fancy_echo "Installing tree, a recursive directory listing"
  brew install tree

fancy_echo "Installing graphviz, npm, and pow! Trust me, you want them ..."
  brew install graphviz
  #curl get.pow.cx | sh

fancy_echo "Installing Mosh, a mobile shell"
  brew install mosh

fancy_echo "Installing htop, a TUI for top"
  brew install htop

fancy_echo "Installing youtube-dl for video downloads"
  brew install youtube-dl
### end mac-components/packages

fancy_echo "Pulling dotfiles"
  if [ ! "$HOME/Developer/" ]; then
    mkdir -p ~/Developer/{Automation,Code,OSS,Projects}
    git clone --recursive git@github.com:NanoXD/nanofiles.git ~/Developer/Code/nanofiles
  fi

fancy_echo "Linking dotfiles"
  for dotfile in "${ZDOTDIR:-$HOME}"/Developer/Code/nanofiles/.{ctags,gemrc,gitconfig,gitignore,pryrc,tmux.conf,vimrc}; do
    ln -fs "$dotfile" "${ZDOTDIR:-$HOME}/${dotfile:t}"
  done

fancy_echo "Linking local bin folder"
  ln -Fs ~/Developer/Code/nanofiles/bin ~/bin
### end common-components/dotfiles

fancy_echo "Installing rbenv, to change Ruby versions ..."
  brew install rbenv || brew reinstall rbenv

  if ! grep -qs "rbenv init" ~/.zshrc; then
    echo 'eval "$(rbenv init -)"' >> ~/.zshrc

    fancy_echo "Enable shims and autocompletion ..."
      eval "$(rbenv init -)"
  fi

  source ~/.zshrc

fancy_echo "Installing rbenv-gem-rehash so the shell automatically picks up binaries after installing gems with binaries..."
  brew install rbenv-gem-rehash

fancy_echo "Installing ruby-build, to install Rubies ..."
  brew install ruby-build

fancy_echo "Installing rbenv-ctags"
  if [ ! "$HOME/.rbenv/plugins/rbenv-ctags" ]; then
    mkdir -p ~/.rbenv/plugins
    git clone https://github.com/tpope/rbenv-ctags.git ~/.rbenv/plugins/rbenv-ctags
  fi

fancy_echo "Installing rbenv-update, a plugin manager"
  if [ ! "$HOME/.rbenv/plugins/rbenv-update" ]; then
    git clone https://github.com/rkh/rbenv-update.git ~/.rbenv/plugins/rbenv-update
  fi
### end mac-components/rbenv

fancy_echo "Installing go"
  brew install go

fancy_echo "Installing Elixir, a functional programming language"
  brew install erlang
  brew install elixir
### end mac-components/languages

fancy_echo "Installing Ruby 2.0.0-p247 ..."
  rbenv install 2.0.0-p247

fancy_echo "Installing Ruby 1.9.3"
  rbenv install 1.9.3"-p448

fancy_echo "Installing Rubinius 2.0.0"
  rbenv install rbx-2.1.1

fancy_echo "Setting Ruby 2.0.0-p247 as global default Ruby ..."
  rbenv global 2.0.0-p247
  rbenv rehash

fancy_echo "Updating to latest Rubygems version ..."
  gem update --system

fancy_echo "Installing critical Ruby gems for Rails development ..."
  gem install bundler gem-ctags teamocil rails jazz_hands
### end common-components/ruby-environment

fancy_echo "Installing pg gem with arch flags ..."
  ARCHFLAGS="-arch x86_64" gem install pg
### end mac-components/pg

fancy_echo "Installing Heroku CLI client ..."
  brew install heroku-toolbelt

fancy_echo "Installing the heroku-config plugin to pull config variables locally to be used as ENV variables ..."
  heroku plugins:install git://github.com/ddollar/heroku-config.git
### end mac-components/heroku

fancy_echo "Installing essential NPM packages - Grunt, Yeoman, and Bower, because you need them ..."
  npm install -g coffee-script grunt-cli bower npm-check-updates jasmine jsonlint
### end mac-components/npm-environment

export HOMEBREW_CASK_OPTS=--appdir=/Applications

fancy_echo "Tapping into homebrew-cask"
  brew tap phinze/homebrew-cask
  brew install brew-cask
  brew update

function installcask() {
  brew cask install "${@}" 2> /dev/null
}

fancy_echo "Installing Dropbox"
  installcask dropbox

fancy_echo "Installing PCKeyboardHack & KeyRemap4Macbook to remap keys"
  installcask pc-keyboardhack
  installcask keyremap4macbook

fancy_echo "Installing iTerm2, a better terminal experience"
  installcask iterm2

fancy_echo "Installing Alfred"
  installcask alfred

fancy_echo "Installing Google Chrome"
  installcask google-chrome

fancy_echo "Installing Airmail, for all the mailz"
  installcask airmail-beta

fancy_echo "Installing Bartender to wrangle the menubar"
  installcask bartender

fancy_echo "Installing Postgres.app"
  installcask postgres

fancy_echo "Installing Virtualbox"
  installcask virtualbox

fancy_echo "Installing Vagrant to manage dev environments"
  installcask vagrant

fancy_echo "Installing CloudApp"
  installcask cloudapp

fancy_echo "Installing AppDelete"
  installcask app-delete

fancy_echo "Installing Doxie drivers"
  installcask doxie

fancy_echo "Installing Evernote for notes"
  installcask evernote

fancy_echo "Installing Google Hangouts"
  installcask google-hangouts

fancy_echo "Installing Instacast, a podcast manager"
  installcask instacast

fancy_echo "Installing Racket"
  installcask racket

fancy_echo "Installing Rdio"
  installcask rdio

fancy_echo "Installing Skype"
  installcask skype

fancy_echo "Installing Sourcetree"
  installcask sourcetree

fancy_echo "Installing Sublime Text 3"
  installcask sublime-text-3

fancy_echo "Installing The Unarchiver"
  installcask the-unarchiver

fancy_echo "Installing TrueCrypt"
  installcask true-crypt

fancy_echo "Installing Inboard, a screenshot manager"
  installcask inboard

### end mac-components/homebrew-cask

fancy_echo "Select a name for your computer:"
  read comp_name
  sudo scutil --set ComputerName "$comp_name"
  sudo scutil --set HostName "$comp_name"
  sudo scutil --set LocalHostName "$comp_name"
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$comp_name"

fancy_echo "Enable access for assistive devices"
  sudo touch /private/var/db/.AccessibilityAPIEnabled

fancy_echo "Expand save panel by default"
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

fancy_echo "Save to disk (not to iCloud) by default"
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

fancy_echo "Disable the 'Are you sure you want to open this application?' dialog"
  defaults write com.apple.LaunchServices LSQuarantine -bool false

fancy_echo "Trackpad: enable tap to click for this user and for the login screen"
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

fancy_echo "Increase sound quality for Bluetooth headphones/headsets"
  defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

fancy_echo "Enable full keyboard access for all controls"
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

fancy_echo "Set a blazingly fast keyboard repeat rate"
  defaults write NSGlobalDomain KeyRepeat -int 0

fancy_echo "Enable subpixel font rendering on non-Apple LCDs"
  defaults write NSGlobalDomain AppleFontSmoothing -int 2

fancy_echo "Show icons for hard drives, servers, and removable media on the desktop"
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

fancy_echo "Finder: allow text selection in Quick Look"
  defaults write com.apple.finder QLEnableTextSelection -bool true

fancy_echo "Avoid creating .DS_Store files on network volumes"
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

fancy_echo "Empty Trash securely by default"
  defaults write com.apple.finder EmptyTrashSecurely -bool true

fancy_echo "Set the icon size of Dock items to 36 pixels"
  defaults write com.apple.dock tilesize -int 36

fancy_echo "Automatically hide and show the Dock"
  defaults write com.apple.dock autohide -bool true

fancy_echo "Set Safari’s home page to `about:blank` for faster loading"
  defaults write com.apple.Safari HomePage -string "about:blank"

fancy_echo "Enable Safari’s debug menu"
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

fancy_echo "Make Safari’s search banners default to Contains instead of Starts With"
  defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

fancy_echo "Enable the Develop menu and the Web Inspector in Safari"
  defaults write com.apple.Safari IncludeDevelopMenu -bool true
  defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

fancy_echo "Add a context menu item for showing the Web Inspector in web views"
  defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

fancy_echo "Killing Affected applications"
  for app in "Address Book" "Calendar" "Contacts" "Dock" "Finder" \
    "Mail" "Safari"  "SystemUIServer" "Terminal" "iCal"; do
    killall "$app" > /dev/null 2>&1
  done

fancy_echo "Done. Note that some of these changes require a logout/restart to take effect."

### end mac-components/default-settings

