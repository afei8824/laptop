#!/usr/bin/env zsh
### end common-components/zsh-shebang

# Welcome to nanoxd's setup script! Be prepared to turn your laptop (or
# desktop, no haters here) into an awesome development machine.

# This file is auto-generated. Do not edit it by hand unless you know what
# you're doing. Please see 'CONTRIBUTING.md' for more information.
### end common-components/header

trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e
### end common-components/exit-trap

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [[ ":$PATH:" != *":$HOME/.bin:"* ]]; then
  printf 'export PATH="$HOME/.bin:$PATH"\n' >> ~/.zshrc
  source ~/.zshrc
fi
### end common-components/check-home-bin

fancy_echo() {
  printf "\n%b\n" "$1"
}

function installcask() {
  brew cask install "${@}" 2> /dev/null
}

function gemi() {
  gem install "${@}"
}

function npmig() {
  npm install -g "${@}"
}

function ap() {
  apm install "${@}"
}
### end common-components/shared-functions

brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      brew upgrade "$@"
    fi
  else
    brew install "$@"
  fi
}

brew_is_installed() {
  local NAME=$(brew_expand_alias "$1")

  brew list -1 | grep -Fqx "$NAME"
}

brew_is_upgradable() {
  local NAME=$(brew_expand_alias "$1")

  local INSTALLED=$(brew ls --versions "$NAME" | awk '{print $NF}')
  local LATEST=$(brew info "$NAME" 2>/dev/null | head -1 | awk '{gsub(/,/, ""); print $3}')

  [ "$INSTALLED" != "$LATEST" ]
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local NAME=$(brew_expand_alias "$1")
  local DOMAIN="homebrew.mxcl.$NAME"
  local PLIST="$DOMAIN.plist"

  mkdir -p ~/Library/LaunchAgents
  ln -sfv /usr/local/opt/$NAME/$PLIST ~/Library/LaunchAgents

  if launchctl list | grep -q $DOMAIN; then
    launchctl unload ~/Library/LaunchAgents/$PLIST >/dev/null
  fi
  launchctl load ~/Library/LaunchAgents/$PLIST >/dev/null
}
### end mac-components/mac-functions

if [[ -f /etc/zshenv ]]; then
  fancy_echo "Fixing OSX zsh environment bug ..."
    sudo mv /etc/{zshenv,zshrc}
fi
### end mac-components/zsh-fix

fancy_echo "Disabling Gatekeeper"
  sudo spctl --master-disable

if (( ! $+commands[brew] )); then
  fancy_echo "Installing Homebrew, a good OS X package manager ..."
    ruby <(curl -fsS https://raw.github.com/Homebrew/homebrew/go/install)
    brew update

  if ! grep -qs "recommended by brew doctor" ~/.zshrc; then
    fancy_echo "Put Homebrew location earlier in PATH ..."
      printf "\n# recommended by brew doctor" >> ~/.zshrc
      printf "export PATH=\"/usr/local/bin:\$PATH\"\n" >> ~/.zshrc
      source ~/.zshrc
  fi
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi
### end mac-components/homebrew

fancy_echo "Installing Fish"
  brew_install_or_upgrade 'fish' '--HEAD'

fancy_echo "Adding fish to /etc/shells"
  echo "/usr/local/bin/fish" | sudo tee -a /etc/shells
### end mac-components/fish

fancy_echo "Checking for SSH key, generating one if it doesn't exist ..."
  [[ -f ~/.ssh/id_rsa.pub ]] || ssh-keygen -t rsa -C "nano@fdp.io"

fancy_echo "Adding SSH Key to authentication agent"
  ssh-add ~/.ssh/id_rsa

fancy_echo "Copying SSH key to clipboard"
  pbcopy < ~/.ssh/id_rsa.pub

fancy_echo "Opening browser to add SSH key to Github"
  open "https://github.com/settings/ssh"
### end mac-components/ssh-key

fancy_echo "Upgrading and linking OpenSSL ..."
  brew_install_or_upgrade 'openssl'
  brew unlink openssl && brew link openssl --force
### end mac-components/compiler-and-libraries

fancy_echo "Installing Python 3"
  brew_install_or_upgrade 'python3'
### end mac-components/python

fancy_echo "Installing git, mercurial, and extras"
  brew_install_or_upgrade 'git' 'git-extras' 'node' 'mercurial'

fancy_echo "Installing tig, a pretty log viewer"
  brew_install_or_upgrade 'tig'

fancy_echo "Installing git-getpull"
  curl -o /usr/local/bin/git-getpull https://raw.github.com/a-warner/git-getpull/master/git-getpull && chmod +x /usr/local/bin/git-getpull
### end mac-components/git

fancy_echo "Install wget with I18n URI support"
  brew_install_or_upgrade 'wget' '--enable-iri'

fancy_echo "Installing Redis, a good key-value database ..."
  brew_install_or_upgrade 'redis'

fancy_echo "Installing Postgresql"
  brew_install_or_upgrade 'postgresql'

fancy_echo "Installing The Silver Searcher to search the contents of files ..."
  brew_install_or_upgrade 'the_silver_searcher'

fancy_echo "Installing ack, just in case"
  brew_install_or_upgrade 'ack'

fancy_echo "Installing CMake"
  brew_install_or_upgrade 'cmake'

fancy_echo "Installing vim from Homebrew to get the latest version ..."
  brew_install_or_upgrade 'macvim' '--override-system-vim'

fancy_echo "Installing ctags"
  brew_install_or_upgrade 'ctags'

fancy_echo "Installing tmux, to save project state and switch between projects ..."
  brew_install_or_upgrade 'tmux'
  brew_install_or_upgrade 'ngrok'

fancy_echo "Installing reattach-to-user-namespace, for copy-paste and compatibility with tmux ..."
  brew_install_or_upgrade 'reattach-to-user-namespace' '--HEAD'

fancy_echo "Installing ImageMagick, to crop and resize images ..."
  brew_install_or_upgrade 'imagemagick'

fancy_echo "Installing QT, used by Capybara Webkit for headless Javascript integration testing ..."
  brew_install_or_upgrade 'qt'

fancy_echo "Installing watch, to execute a program periodically and show the output ..."
  brew_install_or_upgrade 'watch'

fancy_echo "Installing tree, a recursive directory listing"
  brew_install_or_upgrade 'tree'

fancy_echo "Installing graphviz"
  brew_install_or_upgrade 'graphviz'

fancy_echo "Installing Mosh, a mobile shell"
  brew_install_or_upgrade 'mosh'

fancy_echo "Installing youtube-dl for video downloads"
  brew_install_or_upgrade 'youtube-dl'

fancy_echo "Installing ifstat, a tool for network interfaces"
  brew_install_or_upgrade 'ifstat'

fancy_echo "Installing jq, a lightweight and flexible command-line JSON processor"
  brew_install_or_upgrade 'jq'

fancy_echo "Installing httpie, a user friendly curl"
  brew_install_or_upgrade 'httpie'
### end mac-components/packages

fancy_echo "Pulling dotfiles"
  git clone --recursive git@github.com:NanoXD/nanofiles.git ~/.nanofiles

fancy_echo "Linking dotfiles"
  for dotfile in "${ZDOTDIR:-$HOME}"/.nanofiles/{ackrc,agignore,bin,config,ctags,gemrc,gitconfig,gitignore,pryrc,tmux.conf,tmux-layouts,tmuxifier,vimrc}; do
    ln -fs "$dotfile" "${ZDOTDIR:-$HOME}/.${dotfile:t}"
  done
### end common-components/dotfiles

fancy_echo "Installing Chruby, a ruby version manager"
  brew_install_or_upgrade 'https://raw.githubusercontent.com/JeanMertz/chruby-fish/master/homebrew/chruby-fish.rb'
  brew_install_or_upgrade 'ruby-install'
### end common-components/chruby

fancy_echo "Installing go"
  brew_install_or_upgrade 'go'
### end mac-components/languages

fancy_echo "Setting Ruby 2.1.2 as default ruby"
  ruby-install ruby
  echo "ruby-2.1.2" > ~/.ruby-version
### end common-components/ruby-environment

fancy_echo "Configuring Bundler for faster, parallel gem installation ..."
  number_of_cores=`sysctl -n hw.ncpu`
  bundle config --global jobs `expr $number_of_cores - 1`

### end mac-components/bundler

fancy_echo "Installing gem ctags"
  gemi gem-ctags github-auth

fancy_echo "Installing Rails"
  gemi rails

# Not working on 10.10
#fancy_echo "Installing jazz_hands, a pry aio"
#  gemi jazz_hands

fancy_echo "Installing Nomad, a iOS CLI tool"
  gemi nomad-cli

fancy_echo "Installing Tools for Xcode Dev"
  gemi cocoapods jazzy synx helios

### end common-components/default-gems

fancy_echo "Installing CoffeeScript, Grunt, and npm-check-updates"
  npmig coffee-script
  npmig grunt-cli
  npmig npm-check-updates

fancy_echo "Installing linters for JSON and JavaScript"
  npmig jsonlint
  npmig jshint

fancy_echo "Installing Yeoman"
  npmig yo

fancy_echo "Installing vtop"
  npmig vtop
### end mac-components/npm-environment

export HOMEBREW_CASK_OPTS=--appdir=/Applications

fancy_echo "Tapping into homebrew-cask"
  brew tap caskroom/homebrew-cask
  brew tap caskroom/homebrew-versions
  brew tap caskroom/homebrew-fonts
  brew_install_or_upgrade 'caskroom/brew-cask'
  brew update

fancy_echo "Installing Dropbox"
  installcask dropbox

fancy_echo "Installing PCKeyboardHack & KeyRemap4Macbook to remap keys"
  installcask seil
  installcask karabiner

fancy_echo "Installing iTerm2, a better terminal experience"
  installcask iterm2

fancy_echo "Installing Google Chrome"
  installcask google-chrome

fancy_echo "Installing Bartender to wrangle the menubar"
  installcask bartender

fancy_echo "Installing Vagrant to manage dev environments"
  installcask vagrant
  installcask vagrant-manager
  installcask boot2docker

fancy_echo "Installing AppDelete"
  installcask appdelete

fancy_echo "Installing The Unarchiver"
  installcask the-unarchiver

fancy_echo "Installing Anvil, a menubar app for managing local websites"
  installcask anvil

fancy_echo "Installing LaunchRocket, a homebrew-services manager"
  installcask launchrocket

fancy_echo "Installing Charles, an HTTP traffic sniffer"
  installcask charles

fancy_echo "Installing fonts"
  installcask font-ubuntu-mono-powerline
  installcask font-input

fancy_echo "Installing LaunchControl"
  installcask launchcontrol

fancy_echo "Installing Spilio, a Pinboard GUI"
  installcask spilio

fancy_echo "Installing iStat Menus"
  installcask istat-menus
### end mac-components/cask-general

fancy_echo "Installing Spacious"
  installcask spacious

fancy_echo "Installing Paw, a HTTP/REST API helper"
  installcask paw

fancy_echo "Installing Java"
  installcask java

fancy_echo "Installing Doxie driver"
  installcask doxie

fancy_echo "Installing Evernote for notes"
  installcask evernote

fancy_echo "Installing Google Hangouts"
  installcask google-hangouts

fancy_echo "Installing Spotify"
  installcask spotify

fancy_echo "Installing Atom"
  installcask atom

fancy_echo "Installing HockeyApp, an application for Hockey"
  installcask hockeyapp

fancy_echo "Installing WebP Quicklook Plugin"
  installcask webp-quicklook

fancy_echo "Installing other Quicklook Plugin"
  installcask quicklook-csv
  installcask qlcolorcode
  installcask qlprettypatch
  installcask quicklook-json
  installcask qlmarkdown
  installcask qlstephen
  installcask qlcolorcode

fancy_echo "Installing Asepsis, a smart solution for .DS_Store pollution"
  installcask asepsis

fancy_echo "Installing Trailer, a PR manager"
  installcask trailer

fancy_echo "Installing QuickRadar"
  installcask quickradar

fancy_echo "Installing Sketch"
  installcask sketch

fancy_echo "Installing Plug, a media player for The Hype Machine"
  installcask plug

fancy_echo "Installing Sketch Toolbox, a plugin manager"
  installcask sketch-toolbox

fancy_echo "Installing Tower, a git GUI"
  installcask tower

fancy_echo "Installing Xscope"
  installcask xscope


### end mac-components/homebrew-cask

fancy_echo "Downloading Projects"
  mkdir -p ~/Developer/{Automation,Code,Courses,OSS,Projects,Sandbox,Tools}
  git clone git@github.com:NanoXD/boxylib.git ~/Developer/Projects/boxylib
  git clone git@github.com:NanoXD/eulerb.git ~/Developer/Projects/eulerb
  git clone git@github.com:NanoXD/fdpio.git ~/Developer/Projects/fdpio
  git clone git@github.com:NanoXD/fpoop.git ~/Developer/Projects/"Functional Programming for OO Programmer"
  git clone git@github.com:NanoXD/homebrew-cask.git ~/Developer/Projects/Caskroom/homebrew-cask
  git clone git@github.com:caskroom/homebrew-versions.git ~/Developer/Projects/Caskroom/homebrew-versions
  git clone git@github.com:NanoXD/mega_projects_rb.git ~/Developer/Projects/mega_projects_rb
  git clone git@github.com:NanoXD/octopress.git ~/Developer/Projects/blog
  git clone git@github.com:NanoXD/readlog.git ~/Developer/Projects/readlog
  git clone git@github.com:NanoXD/Reddit-Daily-Programmer.git ~/Developer/Projects/Reddit-Daily-Programmer

fancy_echo "Downloading Automation Scripts"
  git clone git@github.com:NanoXD/laptop.git ~/Developer/Automation/laptop
  git clone git@github.com:Alives/tmux-statusline.git ~/Developer/Tools/tmux-statusline

fancy_echo "Downloading Railscast Downloader"
  git clone https://github.com/bayan/railscast-downloader.git ~/Developer/Tools/railscast-downloader
  git clone git@github.com:Ball/nsscreencast-fetcher.git ~/Developer/Tools/nsscreencast-downloader

fancy_echo "Downloading Xcode Plugins"
  git clone git@github.com:macoscope/CodePilot.git ~/Developer/Tools/CodePilot
  git clone git@github.com:JugglerShu/XVim.git ~/Developer/Tools/XVim
  git clone git@github.com:pvwoods/SwiftJson.git ~/Developer/Tools/SwiftJson

fancy_echo "Creating folders for Go and Cheatsheets"
  mkdir -p ~/Developer/Code/{go,cheatsheets}

fancy_echo "Pulling cheatsheets/code guides"
  git clone git@github.com:Avocarrot/ios-cheatsheet.git ~/Developer/Code/cheatsheets/ios
  git clone git@github.com:bbatsov/rails-style-guide.git ~/Developer/Code/cheatsheets/rails
  git clone git@github.com:raywenderlich/swift-style-guide.git ~/Developer/Code/cheatsheets/swift

### end common-components/projects

fancy_echo "Grabbing a Solarized settings pack"
  mkdir -p ~/.vim/settings
  wget -O ~/.vim/settings/solarized.vim "https://raw.githubusercontent.com/skwp/dotfiles/master/vim/settings/solarized.vim"
### end common-components/vim

fancy_echo "Installing Go ctags parser"
  go get -u github.com/jstemmer/gotags

fancy_echo "Installing Heroku CLI"
  L=/usr/local/bin/hk && curl -sL -A "`uname -sp`" https://hk.heroku.com/hk.gz | zcat >$L && chmod +x $L
### end common-components/go

fancy_echo "Installing themes for Atom"
  ap atom-mac-theme
  ap fizzy
  ap spacegray-dark-ui

fancy_echo "Installing vim mode"
  ap vim-mode

fancy_echo "Installing TravisCI status"
  ap travis-ci-status

fancy_echo "Installing Test Status"
  ap test-status

fancy_echo "Installing autocomplete for Atom"
  ap autocomplete-plus
  ap autocomplete-paths
  ap autocomplete-snippets

fancy_echo "Installing a color picker for Atom"
  ap color-picker

fancy_echo "Installing a linter for Atom"
  ap atom-linter
### end common-components/atom

fancy_echo "Installing Alcatraz, the package manager for Xcode"
  mkdir -p ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins;
  curl -L http://git.io/lOQWeA | tar xvz -C ~/Library/Application\ Support/Developer/Shared/Xcode/Plug-ins
### end mac-components/xcode

fancy_echo "Select a name for your computer:"
  read comp_name
  sudo scutil --set ComputerName "$comp_name"
  sudo scutil --set HostName "$comp_name"
  sudo scutil --set LocalHostName "$comp_name"
  sudo defaults write /Library/Preferences/SystemConfiguration/com.apple.smb.server NetBIOSName -string "$comp_name"

fancy_echo "Enable access for assistive devices"
  sudo touch /private/var/db/.AccessibilityAPIEnabled

fancy_echo "Expand save panel by default"
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

fancy_echo "Save to disk (not to iCloud) by default"
  defaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false

fancy_echo "Disable the 'Are you sure you want to open this application?' dialog"
  defaults write com.apple.LaunchServices LSQuarantine -bool false

fancy_echo "Trackpad: enable tap to click for this user and for the login screen"
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

fancy_echo "Increase sound quality for Bluetooth headphones/headsets"
  defaults write com.apple.BluetoothAudioAgent "Apple Bitpool Min (editable)" -int 40

fancy_echo "Enable full keyboard access for all controls"
  defaults write NSGlobalDomain AppleKeyboardUIMode -int 3

fancy_echo "Set a blazingly fast keyboard repeat rate"
  defaults write NSGlobalDomain KeyRepeat -int 0

fancy_echo "Enable subpixel font rendering on non-Apple LCDs"
  defaults write NSGlobalDomain AppleFontSmoothing -int 2

fancy_echo "Show icons for hard drives, servers, and removable media on the desktop"
  defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowHardDrivesOnDesktop -bool true
  defaults write com.apple.finder ShowMountedServersOnDesktop -bool true
  defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool true

fancy_echo "Finder: allow text selection in Quick Look"
  defaults write com.apple.finder QLEnableTextSelection -bool true

fancy_echo "Avoid creating .DS_Store files on network volumes"
  defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true

fancy_echo "Empty Trash securely by default"
  defaults write com.apple.finder EmptyTrashSecurely -bool true

fancy_echo "Set the icon size of Dock items to 36 pixels"
  defaults write com.apple.dock tilesize -int 36

fancy_echo "Automatically hide and show the Dock"
  defaults write com.apple.dock autohide -bool true

fancy_echo "Set Safari’s home page to `about:blank` for faster loading"
  defaults write com.apple.Safari HomePage -string "about:blank"

fancy_echo "Enable Safari’s debug menu"
  defaults write com.apple.Safari IncludeInternalDebugMenu -bool true

fancy_echo "Make Safari’s search banners default to Contains instead of Starts With"
  defaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false

fancy_echo "Enable the Develop menu and the Web Inspector in Safari"
  defaults write com.apple.Safari IncludeDevelopMenu -bool true
  defaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true
  defaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true

fancy_echo "Add a context menu item for showing the Web Inspector in web views"
  defaults write NSGlobalDomain WebKitDeveloperExtras -bool true

fancy_echo "Done. Note that some of these changes require a logout/restart to take effect."

### end mac-components/default-settings

